{"version":3,"file":"main.js","sources":["../src/parser/frontmatter.ts","../src/parser/mdast-util-wikirefs/wikirefsFromMarkdown.ts","../src/parser/remark-wikirefs/remark-wikirefs.ts","../src/parser/bpmn-directive.ts","../src/parser/markdown.ts","../src/config/config.ts","../src/parser/tsdoc.ts","../src/parser/pydoc.ts","../src/link-resolver/uuidIndex.ts","../src/link-resolver/resolveUUIDLinks.ts","../src/link-resolver/backlinks.ts","../src/content/loadContent.ts","../src/parser/notebook.ts","../src/parser/openapi.ts","../src/toc/buildTOC.ts","../src/sitemap/generateSitemap.ts","../src/rss/generateRSS.ts","../src/index.ts","../src/main.ts"],"sourcesContent":["import frontMatter from \"front-matter\";\n\nexport function extractFrontmatter(content: string) {\n  return <Record<string, any>>frontMatter(content);\n}\n","import { Directives, LeafDirective, TextDirective, ToMarkdownOptions } from \"mdast-util-directive\";\nimport { WikiLinkData, WikiEmbedData } from \"micromark-extension-wikirefs\";\nimport { WikiLinkNode, WikiEmbedNode, WikiAttrNode } from \"mdast-util-wikirefs\";\n\nimport { CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle, Token } from \"mdast-util-from-markdown\";\nimport { ConstructName, Handle as ToMarkdownHandle, Options as ToMarkdownExtension, State } from \"mdast-util-to-markdown\";\nimport { Nodes, Paragraph } from \"mdast\";\n\nimport * as wikirefs from \"wikirefs\";\n\n/**\n * Union of registered mdast wikiref nodes.\n *\n * It is not possible to register custom mdast directive node types.\n */\nexport type WikiRef = WikiLinkNode | WikiEmbedNode | WikiAttrNode;\n\nlet opts = {};\n/**\n * Create an extension for `mdast-util-from-markdown` to enable directives in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable directives.\n */\nexport function wikirefFromMarkdown(options = {}): FromMarkdownExtension {\n    opts = options;\n    return {\n        enter: {\n            wikiLink: enterWikiLink,\n        },\n        exit: {\n            wikiLinkTypeTxt: exitLinkTypeTxt,\n            wikiLinkFileNameTxt: exitFileNameTxt,\n            wikiLinkLabelTxt: exitLabelTxt,\n            wikiLinkName: exitName,\n            wikiLink: exitWikilink,\n        },\n    };\n}\n\n    function top<T>(stack: T[]): T {\n    return stack[stack.length - 1];\n    }\n\nfunction exitWikilink(this: CompileContext, token: Token) {\n  const node = top(this.stack);\n\n  let htmlText: string | undefined = wikirefs.CONST.MARKER.OPEN + node.name + wikirefs.CONST.MARKER.TYPE;\n  node.data.item.htmlHref = \"/docs\";\n  node.data.item.htmlText = \"htmlText\";\n  node.data.item.doctype = \"\";\n  node.data.hProperties.href = \"/docs\";\n  node.data.hProperties.dataHref = \"/docs\";\n  node.children = [\n    {\n      type: \"text\",\n      value: node.name,\n    },\n  ];\n  //console.log(\"exitWikilink:\\n\\ttoken: \", token, \"\\n\\tnode: \", node);\n  this.exit(token);\n}\n\nfunction exitName(token: Token): void {\n  const node = top(this.stack);\n  if (node.type !== \"wikiLink\") {\n    throw new Error(\"Expected 'wikiLink' node type, got: \" + node.type);\n  }\n  const name = this.sliceSerialize(token);\n  node.name = name;\n  //console.log(\"exitName: token: \", token, \"name: \", name);\n}\n\n/**\n * @this {CompileContext}\n * @param {WikiRef['type']} type\n * @param {Token} token\n */\nfunction enter(this: CompileContext, token: Token, type: WikiRef[\"type\"]) {\n  this.enter(\n    {\n      type,\n      name: \"\",\n      attributes: {},\n      children: [],\n      data: {\n        item: { label: \"\" },\n        hName: \"a\",\n        hProperties: {\n          className: [\"wikilink\"],\n        },\n      },\n    },\n    token\n  );\n}\n\nfunction exitLinkTypeTxt(this: CompileContext, token: Token): void {\n  //console.log(\"exitLinkTypeTxt: token: \", token);\n}\n\nfunction exitFileNameTxt(this: CompileContext, token: Token): void {\n  const node = this.stack[this.stack.length - 1];\n  const filename: string = this.sliceSerialize(token);\n  node.name = filename;\n  node.data.item.filename = filename;\n  //console.log(\"exitFileNameTxt: token: \", token, \"\\nnode: \", node);\n}\n\nfunction exitLabelTxt(this: CompileContext, token: Token): void {\n  //console.log(\"exitLabelTxt: token: \", token);\n}\n\nfunction enterWikiLink(this: CompileContext, token: Token) {\n  this.enter(\n    {\n      type: \"wikiLink\",\n      name: \"\",\n      attributes: {},\n      children: [],\n      data: {\n        item: { label: \"\" },\n        hName: \"a\",\n        hProperties: {\n          className: [\"wikilink\"],\n        },\n      },\n    },\n    token\n  );\n}\n","// plugins/remark-wikiref-patched.ts\nimport { wikirefFromMarkdown } from \"../mdast-util-wikirefs/wikirefsFromMarkdown\";\nimport { syntaxWikiRefs, syntaxWikiLinks } from \"micromark-extension-wikirefs\";\nimport { visit } from \"unist-util-visit\";\n\nlet warningIssued: boolean = false;\n\nfunction remarkWikirefs(this: any, opts = {}) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = /** @type {Processor<Root>} */ this;\n    const data = self.data();\n    ////console.log(\"remarkWikiRefsPatched: self: \", self);\n\n    if (\n      !warningIssued &&\n      ((self.Parser && self.Parser.prototype && self.Parser.prototype.blockTokenizers) || (self.Compiler && self.Compiler.prototype && self.Compiler.prototype.visitors))\n    ) {\n      warningIssued = true;\n      console.warn(\"[remark-wiki-link] Warning: please upgrade to remark 13 to use this plugin\");\n    }\n\n    ////console.log(\"remarkWikiRefsPatched: data: \", data);\n\n    //add(\"micromarkExtensions\", syntaxWikiLinks(opts));\n    //add(\"fromMarkdownExtensions\", fromMarkdownWikiLinks(opts));\n    //   add(\"toMarkdownExtensions\", toMarkdownWikiLinks(opts));\n\n    const micromarkExtensions = data.micromarkExtensions || (data.micromarkExtensions = []);\n    micromarkExtensions.push(syntaxWikiRefs(opts));\n\n    const fromMarkdownExtensions = data.fromMarkdownExtensions || (data.fromMarkdownExtensions = []);\n    fromMarkdownExtensions.push(wikirefFromMarkdown(opts));\n\n    // const toMarkdownExtensions = data.toMarkdownExtensions || (data.toMarkdownExtensions = []);\n    // toMarkdownExtensions.push(toMarkdownWikiLinks(opts));\n\n    // //console.log(\"remarkWikiRefsPatched: data: \", data);\n    // //console.log(\"remarkWikiRefsPatched: data.micromarkExtensions: \", data.micromarkExtensions);\n    // //console.log(\"remarkWikiRefsPatched: data.fromMarkdownExtensions: \", data.fromMarkdownExtensions);\n    // //console.log(\"remarkWikiRefsPatched: data.toMarkdownExtensions: \", data.toMarkdownExtensions);\n}\n\nexport { remarkWikirefs };\nexport default remarkWikirefs;\n","/**\n * BPMN directive plugin for unified/remark processing with async support\n * \n * This plugin handles the :::bpmn{src=\"./file.bpmn\"} directive syntax,\n * loads BPMN files asynchronously, generates static SVG with ORNL theming, \n * and creates appropriate HTML output for documentation sites.\n * \n * With the migration to async markdown processing, BPMN directives are now\n * processed directly during plugin execution rather than using placeholders.\n * \n * @module parser/bpmn-directive\n * @version 0.2.0\n */\n\nimport fs from 'node:fs/promises';\nimport path from 'node:path';\nimport { h, s } from 'hastscript';\nimport { toHtml } from 'hast-util-to-html';\nimport { visit } from 'unist-util-visit';\nimport { fromHtml } from 'hast-util-from-html'\nimport type { Plugin } from 'unified';\nimport type { Root } from 'mdast';\nimport type { ContainerDirective, LeafDirective, TextDirective } from 'mdast-util-directive';\n\n// Import from @sdl/bpmn - will be available after workspace setup\n// @ts-ignore - Temporary ignore until workspace is configured\nimport {\n  generateStaticSVG,\n  validateBpmnXml,\n  ORNL_COLORS,\n  generateOrnlBpmnStyles,\n  type SvgGenerationOptions,\n  type BpmnThemeOptions,\n  SvgGenerationResult\n} from '@sdl/bpmn';\n\n/**\n * Configuration options for BPMN directive processing\n */\nexport interface BpmnDirectiveOptions {\n  /** Base directory for resolving relative BPMN file paths */\n  baseDir?: string;\n  \n  /** Default theme options for ORNL styling */\n  theme?: BpmnThemeOptions;\n  \n  /** Default SVG generation options */\n  svgOptions?: SvgGenerationOptions;\n  \n  /** Whether to enable error fallback rendering */\n  errorFallback?: boolean;\n  \n  /** Cache BPMN files and generated SVGs */\n  enableCache?: boolean;\n  \n  /** Maximum file size for BPMN files (in bytes) */\n  maxFileSize?: number;\n  \n  /** Custom CSS classes to apply to BPMN containers */\n  cssClasses?: string[];\n}\n\n/**\n * Default configuration for BPMN directive processing\n */\nconst DEFAULT_OPTIONS: Required<BpmnDirectiveOptions> = {\n  baseDir: process.cwd(),\n  theme: {\n    primaryColor: ORNL_COLORS.PRIMARY,\n    secondaryColor: ORNL_COLORS.SECONDARY,\n    backgroundColor: ORNL_COLORS.WHITE,\n    textColor: ORNL_COLORS.TEXT_PRIMARY\n  },\n  svgOptions: {\n    width: 800,\n    height: 600,\n    fitViewport: true,\n    includeTheme: true,\n    zoom: 1.0\n  },\n  errorFallback: true,\n  enableCache: true,\n  maxFileSize: 5 * 1024 * 1024, // 5MB\n  cssClasses: ['bpmn-diagram', 'ornl-theme']\n};\n\n/**\n * Cache for processed BPMN files and generated SVGs\n */\nconst bpmnCache = new Map<string, {\n  svg: string;\n  timestamp: number;\n  fileSize: number;\n}>();\n\n/**\n * Cache TTL in milliseconds (5 minutes)\n */\nconst CACHE_TTL = 5 * 60 * 1000;\n\n/**\n * Remark plugin for processing BPMN directives with async support\n * \n * Handles directive syntax like:\n * - :::bpmn{src=\"./workflow.bpmn\"}\n * - :::bpmn{src=\"../process.bpmn2\" width=\"1000\" height=\"800\"}\n * \n * Now properly supports async processing since the markdown pipeline is async.\n * Creates placeholders during parsing and processes them async during HTML generation.\n * \n * @param options - Plugin configuration options\n * @returns Unified plugin function\n * \n * @example\n * ```typescript\n * import { unified } from 'unified';\n * import remarkParse from 'remark-parse';\n * import remarkDirective from 'remark-directive';\n * import { bpmnDirective } from './bpmn-directive';\n * \n * const processor = unified()\n *   .use(remarkParse)\n *   .use(remarkDirective)\n *   .use(bpmnDirective, {\n *     baseDir: './docs',\n *     theme: { primaryColor: '#00662C' }\n *   });\n * ```\n */\nexport const bpmnDirective: Plugin<[BpmnDirectiveOptions?], Root> = (options = {}) => {\n  const config = { ...DEFAULT_OPTIONS, ...options };\n  \n  return async (tree, file) => {\n    // Collect all BPMN directive nodes for async processing\n    const bpmnNodes: Array<{\n      node: any;\n      index: number;\n      parent: any;\n      attributes: Record<string, string>;\n      src: string;\n    }> = [];\n    \n    // Visit all directive nodes in the markdown AST\n    visit(tree, (node: any) => {\n      return (node.type === 'containerDirective' || node.type === 'leafDirective') && \n             node.name === 'bpmn';\n    }, (node: any, index: number | undefined, parent: any) => {\n      \n      if (index === undefined || !parent) {\n        return;\n      }\n      \n      // Extract attributes from directive\n      const attributes = node.attributes || {};\n      const src = attributes.src;\n      \n      if (!src) {\n        replaceWithError(\n          node, \n          index, \n          parent, \n          'BPMN directive missing required \"src\" attribute',\n          config\n        );\n        return;\n      }\n      \n      // Collect for async processing\n      bpmnNodes.push({ node, index, parent, attributes, src });\n    });\n    \n    // Process all BPMN nodes asynchronously\n    await Promise.all(\n      bpmnNodes.map(async ({ node, index, parent, attributes, src }) => {\n        try {\n          await processBpmnFileAsync(src, attributes, config, node, index, parent);\n        } catch (error) {\n          const err = error as Error;\n          replaceWithError(\n            node,\n            index,\n            parent,\n            `Failed to process BPMN file \"${src}\": ${err.message}`,\n            config\n          );\n        }\n      })\n    );\n  };\n};\n\n/**\n * Process BPMN file asynchronously and replace directive node with SVG\n * \n * @param src - Source file path\n * @param attributes - Directive attributes  \n * @param config - Plugin configuration\n * @param node - Original directive node\n * @param index - Node index in parent\n * @param parent - Parent node\n * \n * @internal\n */\nasync function processBpmnFileAsync(\n  src: string,\n  attributes: Record<string, string>,\n  config: Required<BpmnDirectiveOptions>,\n  node: any,\n  index: number,\n  parent: any\n): Promise<void> {\n  // Resolve file path\n  const filePath = path.isAbsolute(src) \n    ? src \n    : path.resolve(config.baseDir, src);\n\n  try {\n    // Generate SVG using the existing async processBpmnFile function\n    const svgResult = await processBpmnFile(filePath, attributes, config);\n\n    // Create final HTML element\n    const htmlElement = createBpmnHtml(svgResult.svg, attributes, config);\n\n    // Replace the directive node with generated SVG HTML\n    replaceWithHtml(node, index, parent, htmlElement);\n    \n  } catch (error) {\n    const err = error as Error;\n    console.error(`Error processing BPMN file \"${filePath}\":`, err);\n    throw new Error(`BPMN processing failed: ${err.message}`);\n  }\n}\n\n\n\n/**\n * Process BPMN file and generate SVG with caching\n * \n * @param filePath - Absolute path to BPMN file\n * @param attributes - Directive attributes\n * @param config - Plugin configuration\n * @returns Promise resolving to SVG generation result\n * \n * @internal\n */\nasync function processBpmnFile(\n  filePath: string,\n  attributes: Record<string, string>,\n  config: Required<BpmnDirectiveOptions>\n): Promise<{ svg: string; width: number; height: number }> {\n  \n  // Check cache first\n  if (config.enableCache) {\n    const cached = bpmnCache.get(filePath);\n    if (cached && (Date.now() - cached.timestamp) < CACHE_TTL) {\n      return {\n        svg: cached.svg,\n        width: parseInt(attributes.width || config.svgOptions.width!.toString()),\n        height: parseInt(attributes.height || config.svgOptions.height!.toString())\n      };\n    }\n  }\n  \n  // Read BPMN file\n  const stats = await fs.stat(filePath);\n  if (stats.size > config.maxFileSize) {\n    throw new Error(`File too large: ${stats.size} bytes (max: ${config.maxFileSize})`);\n  }\n  \n  const bpmnXml = await fs.readFile(filePath, 'utf-8');\n  \n  // Validate BPMN content\n  const validation = validateBpmnXml(bpmnXml);\n  if (!validation.isValid) {\n    throw new Error(`Invalid BPMN: ${validation.errors.join(', ')}`);\n  }\n  \n  // Merge SVG options with directive attributes\n  const svgOptions: SvgGenerationOptions = {\n    ...config.svgOptions,\n    theme: config.theme,\n    width: parseInt(attributes.width || String(config.svgOptions.width || 800)),\n    height: parseInt(attributes.height || String(config.svgOptions.height || 600)),\n    zoom: parseFloat(attributes.zoom || String(config.svgOptions.zoom || 1.0))\n  };\n  \n  // Generate SVG\n  const result = await generateStaticSVG(bpmnXml, svgOptions);\n  \n  // Cache result\n  if (config.enableCache) {\n    bpmnCache.set(filePath, {\n      svg: result.svg,\n      timestamp: Date.now(),\n      fileSize: stats.size\n    });\n  }\n  \n  return result;\n}\n\n/**\n * Simple SVG parser to convert SVG string to HAST structure\n * This is a minimal parser for our specific SVG use case\n */\nfunction parseSvgToHast(svgString: string): any {\n  // Basic regex to extract SVG tag and content\n  const svgMatch = svgString.match(/<svg([^>]*)>(.*)<\\/svg>/s);\n  if (!svgMatch) {\n    return h('div', { className: 'bpmn-error' }, 'Invalid SVG content');\n  }\n\n  const [, attributes, content] = svgMatch;\n  \n  // Parse attributes\n  const attrs: Record<string, string> = {};\n  const attrRegex = /(\\w+)=\"([^\"]*)\"/g;\n  let attrMatch;\n  while ((attrMatch = attrRegex.exec(attributes)) !== null) {\n    attrs[attrMatch[1]] = attrMatch[2];\n  }\n\n  // For now, return the SVG as raw content within the element\n  // This is a simple approach that should work with hastscript\n  return h('svg', attrs, { type: 'raw', value: content });\n}\n\n/**\n * Create HTML element containing BPMN SVG with ORNL styling\n * \n * @param svg - Generated SVG content\n * @param attributes - Directive attributes\n * @param config - Plugin configuration\n * @returns HTML element object\n * \n * @internal\n */\nfunction createBpmnHtml(\n  svg: string,\n  attributes: Record<string, string>,\n  config: Required<BpmnDirectiveOptions>\n): any {\n  \n  // Generate ORNL theme styles\n  const ornlStyles = generateOrnlBpmnStyles(config.theme);\n  \n  // Build CSS classes\n  const cssClasses = [\n    ...config.cssClasses,\n    ...(attributes.class ? attributes.class.split(' ') : [])\n  ];\n  \n  // Create container properties\n  const containerProps: Record<string, any> = {\n    className: cssClasses.join(' '),\n    'data-bpmn-diagram': 'true'\n  };\n  \n  // Add custom dimensions if specified\n  if (attributes.width || attributes.height) {\n    containerProps.style = {\n      width: attributes.width ? `${attributes.width}px` : undefined,\n      height: attributes.height ? `${attributes.height}px` : undefined\n    };\n  }\n\n  return h('div', containerProps, [\n    // Embedded styles for ORNL theming\n    h('style', { 'data-ornl-bpmn-styles': 'true' }, ornlStyles),\n    \n    // SVG content wrapper - parse SVG string to HAST\n    fromHtml(svg.trim())\n  ]);\n}\n\n/**\n * Legacy build-time processor for converting BPMN placeholders to actual SVGs\n * \n * Note: This function is now optional since BPMN processing happens directly\n * during the async plugin execution. It's kept for backward compatibility\n * and for cases where you might want post-processing of HTML content.\n * \n * @param htmlContent - HTML content containing BPMN placeholders\n * @param baseDir - Base directory for resolving BPMN file paths\n * @param options - Processing options\n * @returns Promise resolving to processed HTML content\n * \n * @example\n * ```typescript\n * // During build process\n * const processedHtml = await processBpmnPlaceholders(htmlContent, './docs');\n * ```\n */\nexport async function processBpmnPlaceholders(\n  htmlContent: string,\n  baseDir: string = process.cwd(),\n  options: BpmnDirectiveOptions = {}\n): Promise<string> {\n  const config = { ...DEFAULT_OPTIONS, ...options, baseDir };\n  \n  // Parse HTML and find BPMN placeholders\n  const placeholderRegex = /<div[^>]*data-bpmn-directive=\"true\"[^>]*>(.*?)<\\/div>/gs;\n  \n  let processedContent = htmlContent;\n  const placeholders = Array.from(htmlContent.matchAll(placeholderRegex));\n  \n  for (const match of placeholders) {\n    const placeholderHtml = match[0];\n    \n    try {\n      // Extract data attributes\n      const srcMatch = placeholderHtml.match(/data-bpmn-src=\"([^\"]+)\"/);\n      const widthMatch = placeholderHtml.match(/data-bpmn-width=\"([^\"]+)\"/);\n      const heightMatch = placeholderHtml.match(/data-bpmn-height=\"([^\"]+)\"/);\n      const zoomMatch = placeholderHtml.match(/data-bpmn-zoom=\"([^\"]+)\"/);\n      \n      if (!srcMatch) continue;\n      \n      const src = srcMatch[1];\n      const attributes = {\n        src,\n        width: widthMatch?.[1] || String(config.svgOptions.width || 800),\n        height: heightMatch?.[1] || String(config.svgOptions.height || 600),\n        zoom: zoomMatch?.[1] || String(config.svgOptions.zoom || 1.0)\n      };\n      \n      // Resolve file path\n      const filePath = path.isAbsolute(src) \n        ? src \n        : path.resolve(baseDir, src);\n      \n      // Generate SVG from BPMN file\n      const svgResult = await processBpmnFile(filePath, attributes, config);\n      \n      // Create final HTML element\n      const htmlElement = createBpmnHtml(svgResult.svg, attributes, config);\n      \n      // Replace placeholder with actual SVG\n      const finalHtml = htmlElement.outerHTML || htmlElement.toString();\n      processedContent = processedContent.replace(placeholderHtml, finalHtml);\n      \n    } catch (error) {\n      const err = error as Error;\n      console.warn(`Failed to process BPMN placeholder: ${err.message}`);\n      \n      // Replace with error fallback if enabled\n      if (config.errorFallback) {\n        const errorHtml = createErrorHtml(`Failed to process BPMN: ${err.message}`, config);\n        processedContent = processedContent.replace(placeholderHtml, errorHtml);\n      }\n    }\n  }\n  \n  return processedContent;\n}\n\n/**\n * Create error HTML for failed BPMN processing\n * \n * @param errorMessage - Error message to display\n * @param config - Plugin configuration\n * @returns HTML string for error display\n * \n * @internal\n */\nfunction createErrorHtml(\n  errorMessage: string,\n  config: Required<BpmnDirectiveOptions>\n): string {\n  const errorElement = h('div', {\n    className: 'bpmn-error ornl-theme',\n    style: {\n      border: `2px solid ${ORNL_COLORS.SECONDARY}`,\n      borderRadius: '0.5rem',\n      padding: '1rem',\n      backgroundColor: 'rgba(254, 80, 0, 0.1)',\n      color: ORNL_COLORS.TEXT_PRIMARY,\n      fontFamily: 'Inter, system-ui, sans-serif'\n    }\n  }, [\n    h('div', { className: 'error-icon', style: { fontSize: '1.25rem', marginBottom: '0.5rem' } }, '⚠️'),\n    h('p', { className: 'error-message', style: { margin: '0', fontWeight: 'bold' } }, 'BPMN processing failed'),\n    h('p', { className: 'error-details', style: { margin: '0.5rem 0 0 0', fontSize: '0.875rem' } }, errorMessage)\n  ]);\n  \n  return toHtml(errorElement);\n}\n\n/**\n * Replace directive node with error fallback HTML\n * \n * @param node - Original directive node\n * @param index - Node index in parent\n * @param parent - Parent node\n * @param errorMessage - Error message to display\n * @param config - Plugin configuration\n * \n * @internal\n */\nfunction replaceWithError(\n  node: any,\n  index: number,\n  parent: any,\n  errorMessage: string,\n  config: Required<BpmnDirectiveOptions>\n): void {\n  \n  if (!config.errorFallback) {\n    throw new Error(errorMessage);\n  }\n  \n  const errorElement = h('div', {\n    className: 'bpmn-error ornl-theme',\n    style: {\n      border: `2px solid ${ORNL_COLORS.SECONDARY}`,\n      borderRadius: '0.5rem',\n      padding: '1rem',\n      backgroundColor: 'rgba(254, 80, 0, 0.1)', // FORGE orange with opacity\n      color: ORNL_COLORS.TEXT_PRIMARY,\n      fontFamily: 'Inter, system-ui, sans-serif'\n    }\n  }, [\n    h('div', { className: 'error-icon', style: { fontSize: '1.25rem', marginBottom: '0.5rem' } }, '⚠️'),\n    h('p', { className: 'error-message', style: { margin: '0', fontWeight: 'bold' } }, 'BPMN processing failed'),\n    h('p', { className: 'error-details', style: { margin: '0.5rem 0 0 0', fontSize: '0.875rem' } }, errorMessage)\n  ]);\n  \n  replaceWithHtml(node, index, parent, errorElement);\n}\n\n/**\n * Replace directive node with HTML element\n * \n * @param node - Original directive node\n * @param index - Node index in parent\n * @param parent - Parent node\n * @param htmlElement - HTML element to insert\n * \n * @internal\n */\nfunction replaceWithHtml(\n  node: any,\n  index: number,\n  parent: any,\n  htmlElement: any\n): void {\n  \n  // Create a new HTML node with properly serialized content\n  const htmlNode = {\n    type: 'html',\n    value: toHtml(htmlElement),\n    position: node.position\n  };\n  \n  // Replace the directive node\n  parent.children[index] = htmlNode;\n}\n\n/**\n * Clear BPMN file cache\n * \n * @param filePath - Specific file to clear, or undefined to clear all\n */\nexport function clearBpmnDirectiveCache(filePath?: string): void {\n  if (filePath) {\n    bpmnCache.delete(filePath);\n  } else {\n    bpmnCache.clear();\n  }\n}\n\n/**\n * Get cache statistics for debugging\n * \n * @returns Cache statistics object\n */\nexport function getBpmnDirectiveCacheStats(): {\n  size: number;\n  entries: Array<{ filePath: string; timestamp: number; fileSize: number }>;\n} {\n  return {\n    size: bpmnCache.size,\n    entries: Array.from(bpmnCache.entries()).map(([filePath, data]) => ({\n      filePath,\n      timestamp: data.timestamp,\n      fileSize: data.fileSize\n    }))\n  };\n}\n","/**\n * @import {} from 'mdast-util-directive'\n * @import {} from 'mdast-util-to-hast'\n * @import {Root} from 'mdast'\n * @import {Plugin} from 'unified'\n */\n\nimport fs from \"node:fs/promises\";\nimport path from \"path\";\nimport { extractFrontmatter } from \"./frontmatter\";\nimport { getConfig } from '../config/config.js';\n\nimport yaml from \"yaml\";\nimport { unified } from \"unified\";\n\nimport { h } from \"hastscript\";\nimport { visit } from \"unist-util-visit\";\nimport type { Plugin } from \"unified\";\nimport type { Directives } from \"mdast-util-directive\";\n\n/* Remark Plugins */\nimport remarkParse from \"remark-parse\";\nimport remarkFrontmatter from \"remark-frontmatter\";\nimport remarkExtractFrontmatter from \"remark-extract-frontmatter\";\nimport { remarkDefinitionList, defListHastHandlers } from \"remark-definition-list\";\nimport sectionize from \"remark-sectionize\";\nimport remarkDirective from \"remark-directive\";\nimport remarkGfm from \"remark-gfm\";\nimport remarkFlexibleToc from \"remark-flexible-toc\";\nimport remarkWikiRefsPatched from './remark-wikirefs/remark-wikirefs';\nimport * as wikirefs from \"wikirefs\";\nimport { bpmnDirective } from './bpmn-directive.js';\n\n\nimport remarkRehype from \"remark-rehype\";\n\nimport rehypeStringify from \"rehype-stringify\";\nimport rehypeSlug from \"rehype-slug\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\n\nimport type { ParsedMarkdown, Page, PageMeta } from \"../types\";\n\n// Directive Options\ntype DirectiveOptions = {\n  // Add your expected plugin options here\n  someFlag?: boolean;\n};\n\n// This plugin is an example to let users write HTML with directives.\n// It’s informative but rather useless.\n// See below for others examples.\nconst genericDirective: Plugin<[DirectiveOptions?]> = (options: DirectiveOptions = {}) => {\n  return (tree) => {\n    visit(tree, [\"textDirective\", \"leafDirective\", \"containerDirective\"], (node: any) => {\n      // //console.log(\"generic directive: node.type\", node.type);\n      if (node.type === \"containerDirective\" || node.type === \"leafDirective\" || node.type === \"textDirective\") {\n        const directive = node as Directives;\n        ////console.log(\"genericDirective: \", directive);\n        const name = directive.name;\n        if (!name) return;\n\n        const data = node.data || (node.data = {});\n        const tagName = node.type === \"textDirective\" ? \"span\" : \"div\";\n\n        data.hName = tagName;\n        data.hProperties = h(tagName, node.attributes || {}).properties;\n        if (name === \"note\" && node.type === \"containerDirective\") {\n          data.hProperties = {\n            className: [\"p-4\", \"gap-3\", \"text-sm\", \"bg-primary-50\", \"dark:bg-gray-800\", \"text-primary-800\", \"dark:text-primary-400\", \"rounded-lg\"],\n            role: [\"alert\"],\n          };\n        }\n        if (name === \"rdfterm\" && node.type === \"textDirective\") {\n          if (directive.children.length == 2) {\n            const firstChild = directive.children[0] as any;\n            const secondChild = directive.children[1] as any;\n            \n            if (firstChild?.value && secondChild?.name) {\n              const children = [\n                {\n                  type: \"text\",\n                  value: firstChild.value + \":\" + secondChild.name,\n                  position: { start: firstChild.position, end: secondChild.position },\n                },\n              ];\n              node.children = children;\n              node.type = \"emphasis\";\n              data.hProperties = { className: [\"mr-1\", \"px-2\", \"py-1\", \"bg-gray-200\", \"rounded-lg\"] };\n            }\n          }\n        } else {\n          node.type = \"mdxJsxFlowElement\";\n          node.name = name;\n          node.attributes = Object.entries(directive.attributes || {}).map(([key, value]) => ({\n            type: \"mdxJsxAttribute\",\n            name: key,\n            value: value || true,\n          }));\n          node.children = directive.children || [];\n        }\n      }\n    });\n  };\n};\n\nlet wikiRefOpts = {\n    resolveDocType: (fname: string) => {\n    //console.log(\"resolveDocType: \", fname);\n  },\n  resolveHtmlHref: (fname: string) => {\n    \n    //console.log(\"resolveHtmlHref: \", fname);\n    const extname: string = wikirefs.isMedia(fname) ? path.extname(fname) : \"\";\n    fname = fname.replace(extname, \"\");\n    return (\n      \"/\" +\n      fname\n        .trim()\n        .toLowerCase()\n        .replace(/ /g, \"-\")\n        .replace(/[^\\w-]+/g, \"\") +\n      extname\n    );\n  },\n  resolveHtmlText: (fname: string) => {\n    //console.log(\"resolveHtmlText: \", fname)\n    fname.replace(/-/g, \" \")\n  },\n  // requires mdast version -- resolves to node, not a string\n  resolveEmbedContent: (fname: string) => {\n    //console.log(\"resolveEmbedContent: \", fname);\n    return {\n      type: \"text\",\n      value: fname + \" embed content\",\n    };\n  },\n  baseUrl: \"/docs/user\",\n};\n\nexport async function parseMarkdown(content: string, options?: { baseDir?: string }) {\n  // Use the configured base path from environment, options, or hardcoded fallback\n  const configuredBasePath = options?.baseDir || process.env.PROJECT_ROOT || '/Users/x8q/Projects/INTERSECT/ACL/';\n  \n  const processor = unified()\n    .use(remarkParse)\n    //.use(html_parser)\n    .use(remarkFrontmatter, [\"yaml\"])\n    .use(remarkExtractFrontmatter, { yaml: yaml.parse })\n    .use(remarkWikiRefsPatched, {baseUrl: \"/docs/\"})\n    .use(sectionize)\n    .use(remarkDirective)\n    .use(bpmnDirective, {  // Use configured base path for BPMN files\n      baseDir: configuredBasePath,\n      errorFallback: true,\n      enableCache: true\n    })\n    .use(genericDirective)\n    .use(remarkDefinitionList)\n    .use(remarkGfm)\n    .use(remarkFlexibleToc)\n    .use(remarkRehype, { allowDangerousHtml: true, allowDangerousCharacters: true, handlers: { ...defListHastHandlers } })\n    .use(rehypeSlug)\n    .use(rehypeAutolinkHeadings, { behavior: \"wrap\" })\n    .use(rehypeStringify, { allowDangerousHtml: true });\n\n  //const processed = processor.processSync(content);\n  const processed = await processor\n    .process(content)\n    .then((result) => {\n      return result;\n    })\n    .catch((err) => {\n      console.error(\"Error generating docs:\", err);\n      throw err; // Re-throw to handle properly\n    });\n  \n  return { code: String(processed.value), data: processed.data };\n}\n\nexport async function getFrontmatter(filePath: string): Promise<Page> {\n  const document = await fs.readFile(filePath, \"utf-8\");\n  // Extract frontmatter\n  const content = extractFrontmatter(document);\n  const meta = content.attributes;\n\n  return {\n    content: \"\", //processed.toString(),\n    meta: meta as PageMeta,\n  };\n}\n\n// Support `.md`, `.svx`, and `.mdx` extensions\nexport function isMarkdownFile(filename: string): boolean {\n  return filename.endsWith(\".md\") || filename.endsWith(\".svx\") || filename.endsWith(\".mdx\");\n}\n\nexport async function parseMarkdownWithFrontmatter(content: string): Promise<{ html: string; meta: Record<string, any> }> {\n  const { attributes, body } = extractFrontmatter(content);\n  const processed = await parseMarkdown(body);\n  return {\n    html: processed.code,\n    meta: attributes\n  };\n}\n","import path from 'node:path';\nimport { PathConfig } from '../types.js';\n\n/**\n * Configuration manager for doc-gen library\n */\nexport class DocGenConfig {\n  private static instance: DocGenConfig;\n  private config: Required<PathConfig>;\n\n  private constructor(pathConfig?: PathConfig) {\n    this.config = this.resolveConfig(pathConfig);\n  }\n\n  /**\n   * Get or create the singleton configuration instance\n   */\n  static getInstance(pathConfig?: PathConfig): DocGenConfig {\n    if (!DocGenConfig.instance) {\n      DocGenConfig.instance = new DocGenConfig(pathConfig);\n    } else if (pathConfig) {\n      // Update existing instance with new config\n      DocGenConfig.instance.updateConfig(pathConfig);\n    }\n    return DocGenConfig.instance;\n  }\n\n  /**\n   * Update the current configuration\n   */\n  updateConfig(pathConfig: PathConfig): void {\n    this.config = this.resolveConfig(pathConfig);\n  }\n\n  /**\n   * Resolve configuration from multiple sources with fallbacks\n   */\n  private resolveConfig(pathConfig?: PathConfig): Required<PathConfig> {\n    // Default configuration\n    const defaults: Required<PathConfig> = {\n      basePath: this.resolveBasePath(),\n      contentRoots: ['docs', 'platforms'],\n      slugPrefixes: ['/docs/', '/platforms/'],\n      fileExtensions: ['md', 'mdx']\n    };\n\n    // Override with provided config\n    const resolved: Required<PathConfig> = {\n      basePath: pathConfig?.basePath ? this.resolvePath(pathConfig.basePath) : defaults.basePath,\n      contentRoots: pathConfig?.contentRoots ?? defaults.contentRoots,\n      slugPrefixes: pathConfig?.slugPrefixes ?? defaults.slugPrefixes,\n      fileExtensions: pathConfig?.fileExtensions ?? defaults.fileExtensions\n    };\n\n    return resolved;\n  }\n\n  /**\n   * Resolve base path from multiple sources\n   */\n  private resolveBasePath(): string {\n    // 1. Check environment variables\n    const envVars = [\n      'DOC_GEN_BASE_PATH',\n      'PROJECT_ROOT',\n      'WORKSPACE_ROOT',\n      'PWD'\n    ];\n\n    for (const envVar of envVars) {\n      const value = process.env[envVar];\n      if (value && this.isValidPath(value)) {\n        //console.log(`[doc-gen] Using base path from ${envVar}: ${value}`);\n        return path.resolve(value);\n      }\n    }\n\n    // 2. Fallback to current working directory\n    const cwd = process.cwd();\n    //console.log(`[doc-gen] Using current working directory as base path: ${cwd}`);\n    return cwd;\n  }\n\n  /**\n   * Resolve a path that might be an environment variable or absolute path\n   */\n  private resolvePath(pathOrEnvVar: string): string {\n    // Check if it's an environment variable reference\n    if (process.env[pathOrEnvVar]) {\n      const envPath = process.env[pathOrEnvVar];\n      //console.log(`[doc-gen] Resolved path from env ${pathOrEnvVar}: ${envPath}`);\n      return path.resolve(envPath);\n    }\n\n    // Check if it's a Windows absolute path (even on non-Windows systems)\n    if (/^[A-Za-z]:(\\\\|\\/)/i.test(pathOrEnvVar)) {\n      // Normalize Windows paths to forward slashes for consistent processing\n      return pathOrEnvVar.replace(/\\\\/g, '/');\n    }\n\n    // Check if it's already an absolute path\n    if (path.isAbsolute(pathOrEnvVar)) {\n      return pathOrEnvVar;\n    }\n\n    // Resolve relative to current working directory\n    return path.resolve(pathOrEnvVar);\n  }\n\n  /**\n   * Check if a path exists and is accessible\n   */\n  private isValidPath(pathToCheck: string): boolean {\n    try {\n      const resolved = path.resolve(pathToCheck);\n      // Basic validation - path should be absolute after resolution\n      return path.isAbsolute(resolved);\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Get the resolved base path\n   */\n  getBasePath(): string {\n    return this.config.basePath;\n  }\n\n  /**\n   * Get resolved content root paths (absolute)\n   */\n  getContentRoots(): string[] {\n    return this.config.contentRoots.map(root => {\n      if (path.isAbsolute(root)) {\n        return root;\n      }\n      return path.resolve(this.config.basePath, root);\n    });\n  }\n\n  /**\n   * Get slug prefixes for content root removal\n   */\n  getSlugPrefixes(): string[] {\n    return this.config.slugPrefixes;\n  }\n\n  /**\n   * Get file extensions to process\n   */\n  getFileExtensions(): string[] {\n    return this.config.fileExtensions;\n  }\n\n  /**\n   * Generate file glob patterns for content discovery\n   */\n  getFilePatterns(): string[] {\n    return this.config.fileExtensions.map(ext => `**/*.${ext}`);\n  }\n\n  /**\n   * Convert file path to slug based on configuration\n   */\n  pathToSlug(filePath: string): string {\n    // Normalize the path and convert backslashes to forward slashes for consistent processing\n    let normalizedPath = path.normalize(filePath).replace(/\\\\/g, '/');\n    const normalizedBasePath = path.normalize(this.config.basePath).replace(/\\\\/g, '/');\n    \n    // Remove file extension\n    let slug = normalizedPath.replace(/\\.[^/.]+$/, \"\");\n    \n    // Remove base path if present\n    if (slug.startsWith(normalizedBasePath)) {\n      slug = slug.slice(normalizedBasePath.length);\n    }\n    \n    // Remove Windows drive letter if present (e.g., \"/C:\" becomes \"\")\n    slug = slug.replace(/^\\/[A-Za-z]:/, '');\n    \n    // Remove configured prefixes\n    for (const prefix of this.config.slugPrefixes) {\n      if (slug.startsWith(prefix)) {\n        slug = slug.slice(prefix.length);\n        break; // Only remove the first matching prefix\n      }\n    }\n    \n    return slug;\n  }\n\n  /**\n   * Get full configuration object (for debugging)\n   */\n  getConfig(): Required<PathConfig> {\n    return { ...this.config };\n  }\n\n  /**\n   * Log current configuration (for debugging)\n   */\n  logConfig(): void {\n    //console.log('[doc-gen] Current configuration:');\n    //console.log('  Base Path:', this.config.basePath);\n    //console.log('  Content Roots:', this.config.contentRoots);\n    //console.log('  Resolved Content Roots:', this.getContentRoots());\n    //console.log('  Slug Prefixes:', this.config.slugPrefixes);\n    //console.log('  File Extensions:', this.config.fileExtensions);\n  }\n}\n\n/**\n * Convenience function to get configuration instance\n */\nexport function getConfig(pathConfig?: PathConfig): DocGenConfig {\n  return DocGenConfig.getInstance(pathConfig);\n}\n\n/**\n * Convenience function to configure doc-gen paths\n */\nexport function configurePaths(pathConfig: PathConfig): void {\n  DocGenConfig.getInstance(pathConfig);\n}\n","import { \n  Project, \n  SyntaxKind, \n  JSDoc, \n  Node, \n  SourceFile,\n  JSDocTag,\n  ScriptTarget,\n  ModuleKind,\n  ModuleResolutionKind\n} from \"ts-morph\";\nimport path from \"path\";\nimport { unified } from \"unified\";\nimport remarkParse from \"remark-parse\";\nimport remarkDirective from \"remark-directive\";\nimport remarkGfm from \"remark-gfm\";\nimport { visit } from \"unist-util-visit\";\nimport type { Plugin } from \"unified\";\n\nfunction getJSDocDescription(node: Node): string {\n  if (node.getKind() !== SyntaxKind.Parameter) {\n    return '';\n  }\n\n  const parent = node.getParentOrThrow();\n  if (!node.getSymbol()) {\n    return '';\n  }\n\n  // Get all JSDoc comments from the parent\n  const jsDocable = parent as Node & { getJsDocs(): JSDoc[] };\n  if (!jsDocable.getJsDocs) {\n    return '';\n  }\n\n  const docs = jsDocable.getJsDocs();\n  const paramName = node.getSymbol()!.getName();\n  \n  // Find all param tags that match this parameter's name\n  const paramDocs = docs.flatMap((doc: JSDoc) => \n    doc.getTags()\n      .filter((tag: JSDocTag) => tag.getTagName() === 'param')\n      .filter((tag: JSDocTag) => {\n        const tagText = tag.getText();\n        return tagText.startsWith(`@param ${paramName}`) || tagText.startsWith(`@param {`) && tagText.includes(`} ${paramName}`);\n      })\n      .map((tag: JSDocTag) => tag.getCommentText() || '')\n  );\n\n  return paramDocs.filter((text: string): text is string => text !== '').join('\\n');\n}\n\nexport interface ExtractedDoc {\n  name: string;\n  kind: string;\n  documentation: string;\n  uuid?: string;\n  filePath: string;\n  tags: Record<string, string[]>;\n  codeInfo?: {\n    line: number;\n    column: number;\n    parameters?: Array<{ name: string; type: string; description?: string }>;\n    returns?: { type: string; description?: string };\n  };\n}\n\nfunction extractTags(jsDocs: JSDoc[]): Record<string, string[]> {\n  const tags: Record<string, string[]> = {};\n  for (const doc of jsDocs) {\n    const tagNodes = doc.getTags();\n    for (const tag of tagNodes) {\n      const tagName = tag.getTagName();\n      const tagText = String(tag.getCommentText() || \"\");\n      // Initialize the tag array if it doesn't exist\n      if (!tags[tagName]) {\n        tags[tagName] = [];\n      }\n      tags[tagName].push(tagText);\n    }\n  }\n  return tags;\n}\n\nfunction extractUUID(jsDocs: JSDoc[]): string | undefined {\n  for (const doc of jsDocs) {\n    // Try to find a @uuid tag first\n    const tags = doc.getTags();\n    const uuidTag = tags.find((tag: JSDocTag) => tag.getTagName() === \"uuid\");\n    if (uuidTag) {\n      return String(uuidTag.getCommentText() || \"\");\n    }\n\n    // If no @uuid tag, try to find a uuid: or uuid= pattern in the comment text\n    const comment = doc.getCommentText();\n    if (typeof comment === \"string\") {\n      const uuid = extractUUIDFromComment(comment);\n      if (uuid) return uuid;\n    }\n\n    // Also check the full JSDoc text\n    const fullText = doc.getText();\n    if (fullText) {\n      const uuid = extractUUIDFromComment(fullText);\n      if (uuid) return uuid;\n    }\n  }\n  return undefined;\n}\n\nfunction processJSDoc(doc: string): string {\n  try {\n    // Parse the document\n    const tree = unified()\n      .use(remarkParse)\n      .use(remarkDirective)\n      .use(remarkGfm)\n      .parse(doc);\n\n    // Convert to mdast\n    return doc;\n  } catch (error) {\n    // If parsing fails, return original text\n    return doc;\n  }\n}\n\nfunction getCodeInfo(node: Node): ExtractedDoc['codeInfo'] {\n  const pos = node.getPos();\n  const sourceFile = node.getSourceFile();\n  const { line, column } = sourceFile.getLineAndColumnAtPos(pos);\n  \n  const info: ExtractedDoc['codeInfo'] = { line, column };\n\n  if (Node.isMethodDeclaration(node) || Node.isFunctionDeclaration(node)) {\n    const paramDocs = new Map<string, string>();\n    \n    // Extract parameter descriptions from JSDoc tags\n    if (Node.isJSDocable(node)) {\n      node.getJsDocs().forEach(doc => {\n        doc.getTags().forEach(tag => {\n          if (tag.getTagName() === 'param') {\n            const paramTag = tag as any; // Cast to access getName()\n            if (paramTag.getName) {\n              const paramName = paramTag.getName();\n              const description = paramTag.getCommentText();\n              if (paramName && description) {\n                paramDocs.set(paramName, description);\n              }\n            }\n          }\n        });\n      });\n    }\n\n    info.parameters = node.getParameters().map(param => ({\n      name: param.getName(),\n      type: param.getType().getText(),\n      description: paramDocs.get(param.getName())\n    }));\n\n    const returnType = node.getReturnType();\n    if (returnType) {\n      let returnDescription: string | undefined;\n      if (Node.isJSDocable(node)) {\n        const returnTag = node.getJsDocs()\n          ?.flatMap(doc => doc.getTags())\n          .find((tag): tag is JSDocTag => \n            tag.getTagName() === 'returns' || tag.getTagName() === 'return'\n          );\n        returnDescription = returnTag?.getCommentText();\n      }\n\n      info.returns = {\n        type: returnType.getText(),\n        description: returnDescription\n      };\n    }\n  }\n\n  return info;\n}\n\nfunction extractUUIDFromComment(comment: string): string | undefined {\n  // Try matching uuid: or uuid= pattern\n  const match = comment.match(/uuid\\s*[=:]\\s*([0-9a-fA-F-]{36})/i);\n  if (match) {\n    return match[1];\n  }\n  return undefined;\n}\n\nexport function parseTypeScriptDocs(filePath: string): Array<ExtractedDoc> {\n  try {\n    // Get the directory from the file path for module resolution\n    const sourceDir = path.dirname(filePath);\n\n    // Initialize Project with strict mode TypeScript config\n    const project = new Project({\n      compilerOptions: {\n        target: ScriptTarget.ESNext,\n        module: ModuleKind.ESNext,\n        moduleResolution: ModuleResolutionKind.Bundler,\n        strict: true,\n        types: []\n      }\n    });\n\n    const sourceFile = project.addSourceFileAtPath(filePath);\n    const docs: ExtractedDoc[] = [];\n\n    // First look for module-level comments at the top of the file\n    const fileComments = sourceFile.getLeadingCommentRanges();\n    for (const comment of fileComments ?? []) {\n      const commentText = comment.getText();\n      const uuid = extractUUIDFromComment(commentText);\n      if (uuid) {\n        docs.push({\n          name: path.basename(filePath),\n          kind: \"file\",\n          documentation: commentText,\n          filePath,\n          uuid,\n          tags: {}\n        });\n      }\n    }\n\n    // Then process JSDoc comments for all nodes\n    sourceFile.forEachDescendant((node: Node) => {\n      if (!Node.isJSDocable(node)) return;\n\n      const symbol = node.getSymbol();\n      const name = symbol?.getName();\n      if (!name) return;\n\n      const jsDocs = node.getJsDocs();\n      // Allow nodes without JSDoc if they have leading comments\n      const leadingComments = node.getLeadingCommentRanges();\n      if (jsDocs.length === 0 && !leadingComments?.length) return;\n\n      // Process JSDoc comments\n      const docTexts: string[] = [];\n      const exampleBlocks: string[] = [];\n      const tags: Record<string, string[]> = {};\n\n      // Also check leading comments for UUIDs\n      if (leadingComments) {\n        for (const comment of leadingComments) {\n          const commentText = comment.getText();\n          const uuid = extractUUIDFromComment(commentText);\n          if (uuid) {\n            tags.uuid = [uuid];\n          }\n          if (!comment.getText().startsWith('/*')) {\n            // Skip single-line comments\n            continue;\n          }\n          docTexts.push(commentText.replace(/^\\/\\*+\\s*|\\s*\\*+\\/$/g, ''));\n        }\n      }\n\n      for (const doc of jsDocs) {\n        // Process main comment text\n        const fullText = doc.getCommentText() || \"\";\n        const mainText = fullText.split('\\n')\n          .filter(line => !line.trim().startsWith('@'))\n          .join('\\n')\n          .trim();\n\n        if (mainText) {\n          docTexts.push(mainText);\n        }\n\n        // Extract tags\n        Object.assign(tags, extractTags([doc]));\n      }\n\n      const documentation = docTexts.join('\\n\\n');\n      const example = tags.example?.[0];\n      const docWithExample = example ? documentation + '\\n\\n' + example : documentation;\n      const extracted: ExtractedDoc = {\n        name,\n        kind: node.getKindName(),\n        documentation: docWithExample,\n        filePath,\n        tags,\n        uuid: tags.uuid?.[0]\n      };\n\n      // Extract code info for functions\n      if (Node.isFunctionDeclaration(node) || Node.isMethodDeclaration(node)) {\n        const parameters = node.getParameters().map(param => ({\n          name: param.getName(),\n          type: param.getType().getText(),\n          description: getJSDocDescription(param)\n        }));\n\n        const returnType = node.getReturnType();\n        const returnDescription = node.getJsDocs()\n          .map(doc => doc.getTags().find(tag => tag.getTagName() === 'returns'))\n          .filter(tag => tag)\n          .map(tag => tag!.getCommentText())\n          .filter(text => text)\n          .join('\\n');\n\n        extracted.codeInfo = {\n          line: node.getStartLineNumber(),\n          column: node.getStart() - node.getStartLinePos(),\n          parameters,\n          returns: {\n            type: returnType.getText(),\n            description: returnDescription || undefined\n          }\n        };\n      }\n\n      docs.push(extracted);\n    });\n\n    return docs;\n  } catch (err) {\n    console.error('Error parsing TS:', filePath, err);\n    return [];\n  }\n}\n","// libs/ssg/src/parser/pydoc.ts\nimport fs from \"fs/promises\";\n\nexport interface ExtractedPythonDoc {\n  name: string;\n  uuid?: string;\n  docstring: string;\n  filePath: string;\n}\n\nexport async function parsePythonDocs(filePath: string): Promise<ExtractedPythonDoc[]> {\n  const content = await fs.readFile(filePath, \"utf-8\");\n  const lines = content.split(\"\\n\");\n  const docs: ExtractedPythonDoc[] = [];\n\n  let currentDoc: Partial<ExtractedPythonDoc> = {};\n  let insideDoc = false;\n  let docLines: string[] = [];\n\n  for (const line of lines) {\n    if (/^def\\s+(\\w+)/.test(line)) {\n      if (currentDoc.name && docLines.length) {\n        currentDoc.docstring = docLines.join(\"\\n\");\n        if (currentDoc.uuid && currentDoc.name) {\n          docs.push(currentDoc as ExtractedPythonDoc);\n        }\n      }\n      const [, name] = line.match(/^def\\s+(\\w+)/) || [];\n      currentDoc = {\n        name,\n        filePath,\n        uuid: undefined,\n        docstring: \"\",\n      };\n      insideDoc = false;\n      docLines = [];\n    } else if (/^\\s*\"\"\"/.test(line)) {\n      insideDoc = !insideDoc;\n      if (!insideDoc && currentDoc.name) {\n        currentDoc.docstring = docLines.join(\"\\n\");\n        if (currentDoc.uuid && currentDoc.name) {\n          docs.push(currentDoc as ExtractedPythonDoc);\n        }\n      }\n    } else if (insideDoc) {\n      docLines.push(line);\n      const uuidMatch = line.match(/uuid\\s*[:=]\\s*([0-9a-fA-F-]{36})/);\n      if (uuidMatch) {\n        currentDoc.uuid = uuidMatch[1];\n      }\n    }\n  }\n\n  return docs;\n}\n","import fs from \"fs/promises\";\nimport path from \"path\";\nimport { parseMarkdownWithFrontmatter, isMarkdownFile } from \"../parser/markdown\";\nimport { parseTypeScriptDocs } from \"../parser/tsdoc\";\nimport { parsePythonDocs } from \"../parser/pydoc\";\nimport fg from \"fast-glob\";\n\nexport interface UUIDEntry {\n  uuid: string;\n  filePath: string;\n  type: \"markdown\" | \"typescript\" | \"python\";\n  title?: string;\n}\n\nexport async function buildUUIDIndex(contentDir: string, outputFile?: string): Promise<Record<string, UUIDEntry>> {\n  const index: Record<string, UUIDEntry> = {};\n\n  const files = await fg([\"**/*.md\", \"**/*.svx\", \"**/*.ts\", \"**/*.py\"], {\n    cwd: contentDir,\n    absolute: true,\n  });\n\n  for (const file of files) {\n    if (isMarkdownFile(file)) {\n      try {\n        const content = await fs.readFile(file, 'utf-8');\n        const parsed = await parseMarkdownWithFrontmatter(content);\n        const uuid = parsed.meta?.uuid;\n        if (uuid) {\n          index[uuid] = {\n            uuid,\n            filePath: file,\n            type: \"markdown\",\n            title: parsed.meta?.title || \"\",\n          };\n        }\n      } catch (err) {\n        console.warn(`Error parsing markdown: ${file}`, err);\n      }\n    } else if (file.endsWith(\".ts\")) {\n      try {\n        const docs = await parseTypeScriptDocs(file);\n        for (const doc of docs) {\n          if (doc.uuid) {\n            index[doc.uuid] = {\n              uuid: doc.uuid,\n              filePath: file,\n              type: \"typescript\",\n              title: doc.name,\n            };\n          }\n        }\n      } catch (err) {\n        console.warn(`Error parsing TypeScript: ${file}`, err);\n      }\n    } else if (file.endsWith(\".py\")) {\n      try {\n        const docs = await parsePythonDocs(file);\n        for (const doc of docs) {\n          if (doc.uuid) {\n            index[doc.uuid] = {\n              uuid: doc.uuid,\n              filePath: doc.filePath,\n              type: \"python\",\n              title: doc.name,\n            };\n          }\n        }\n      } catch (err) {\n        console.warn(`Error parsing Python: ${file}`, err);\n      }\n    }\n  }\n\n  if (outputFile) {\n    try {\n      await fs.writeFile(outputFile, JSON.stringify(index, null, 2), \"utf-8\");\n    } catch (err) {\n      console.error(`Failed to write UUID index cache to ${outputFile}`, err);\n    }\n  }\n\n  return index;\n}\n","import fs from \"fs/promises\";\nimport path from \"path\";\nimport fg from \"fast-glob\";\nimport { buildUUIDIndex, type UUIDEntry } from \"./uuidIndex\";\n\n/**\n * Replace all instances of [[uuid:...]] with relative links to the appropriate file\n */\nexport async function resolveUUIDLinks(contentDir: string, cachePath: string): Promise<void> {\n  const uuidIndex = await buildUUIDIndex(contentDir, cachePath);\n\n  const files = await fg([\"**/*.md\", \"**/*.svx\", \"**/*.ts\", \"**/*.py\"], {\n    cwd: contentDir,\n    absolute: true,\n  });\n\n  for (const file of files) {\n    let content = await fs.readFile(file, \"utf-8\");\n\n    const updated = content.replace(/\\[\\[uuid:([0-9a-fA-F-]{36})\\]\\]/g, (_, uuid: string) => {\n      const entry = uuidIndex[uuid];\n      if (!entry) return `[[MISSING UUID: ${uuid}]]`;\n\n      let relativePath = path.relative(path.dirname(file), entry.filePath).replace(/\\\\/g, \"/\");\n      if (!relativePath.startsWith(\".\")) {\n        relativePath = \"./\" + relativePath;\n      }\n\n      //console.log(file, path.dirname(file), entry.filePath);\n      return `[${entry.title ?? \"Link\"}](${relativePath})`;\n    });\n\n    if (updated !== content) {\n      await fs.writeFile(file, updated, \"utf-8\");\n    }\n  }\n}\n","// libs/ssg/src/link-resolver/backlinks.ts\nimport fs from \"fs/promises\";\nimport path from \"path\";\nimport fg from \"fast-glob\";\n\ninterface BacklinkIndex {\n  [targetUUID: string]: {\n    count: number;\n    sources: string[];\n  };\n}\n\n/**\n * Builds a backlink index mapping target UUIDs to their referencing file paths\n */\nexport async function buildBacklinkIndex(contentDir: string): Promise<BacklinkIndex> {\n  const files = await fg([\"**/*.{md,svx,ts,py}\"], {\n    cwd: contentDir,\n    absolute: true,\n  });\n\n  const backlinks: BacklinkIndex = {};\n\n  for (const file of files) {\n    const content = await fs.readFile(file, \"utf-8\");\n    const matches = [...content.matchAll(/\\[\\[uuid:([0-9a-fA-F-]{36})\\]\\]/g)];\n\n    for (const match of matches) {\n      const uuid = match[1];\n      if (!backlinks[uuid]) {\n        backlinks[uuid] = { count: 0, sources: [] };\n      }\n      backlinks[uuid].count++;\n      backlinks[uuid].sources.push(file);\n    }\n  }\n\n  return backlinks;\n}\n\n/**\n * Optionally persist backlink index to disk for analysis or build tasks\n */\nexport async function writeBacklinkIndex(index: BacklinkIndex, outPath: string): Promise<void> {\n  await fs.writeFile(outPath, JSON.stringify(index, null, 2), \"utf-8\");\n}\n","import fg from \"fast-glob\";\nimport { parseMarkdown, getFrontmatter } from \"../parser/markdown\";\nimport { processBpmnPlaceholders } from \"../parser/bpmn-directive\";\nimport type { ParsedMarkdown, Page, PageMeta, PathConfig } from \"../types\";\nimport { getConfig } from \"../config/config\";\nimport { buildUUIDIndex } from \"../link-resolver/uuidIndex\";\nimport { resolveUUIDLinks } from \"../link-resolver/resolveUUIDLinks\";\nimport { buildBacklinkIndex } from \"../link-resolver/backlinks\";\n\nimport fs from \"node:fs/promises\";\n\nasync function getPostsInPath(docpath: string, pathConfig?: PathConfig): Promise<ParsedMarkdown[]> {\n  //console.log(\"getPostInPath: \", docpath);\n  \n  const config = getConfig(pathConfig);\n  const filePatterns = config.getFilePatterns();\n  \n  const files = await fg(filePatterns, {\n    cwd: docpath,\n    absolute: true,\n  });\n\n  const iterablePostFiles = Object.entries(files);\n\n  let posts = await Promise.all(\n    iterablePostFiles.map(async (currentValue) => {\n      //console.log(\"getPostsInPath: \", currentValue);\n      const file = await fs.readFile(currentValue[1], \"utf-8\");\n      const parsed = await parseMarkdown(currentValue[1] as string).catch((err) => {\n        console.error(\"Error generating docs:\", err);\n        process.exit(1);\n      });\n\n      return {\n        content: parsed.code, //processed.toString(),\n        meta: parsed.data,\n      };\n    })\n  );\n\n  return posts;\n}\n\n// New function to build UUID index\nexport async function buildUUIDIndexForContent(contentPath: string, cachePath?: string) {\n  try {\n    const uuidIndex = await buildUUIDIndex(contentPath, cachePath);\n    //console.log(\"UUID Index built successfully:\", uuidIndex);\n    return uuidIndex;\n  } catch (err) {\n    console.error(\"Error building UUID index:\", err);\n    throw err;\n  }\n}\n\nexport async function getEntries(contentPath: string, pathConfig?: PathConfig) {\n  const config = getConfig(pathConfig);\n  const filePatterns = config.getFilePatterns();\n\n  // Build UUID index\n  const uuidIndex = await buildUUIDIndexForContent(contentPath);\n\n  const files = await fg(filePatterns, {\n    cwd: contentPath,\n    absolute: true,\n  });\n\n  const iterablePostFiles = Object.entries(files);\n\n  let posts = await Promise.all(\n    iterablePostFiles.map(async (currentValue) => {\n      const slug = config.pathToSlug(currentValue[1]);\n\n      // Include UUID information if available\n      const uuidEntry = Object.values(uuidIndex).find(entry => entry.filePath === currentValue[1]);\n\n      return {\n        slug: slug,\n        uuid: uuidEntry?.uuid || undefined,\n      };\n    })\n  );\n\n  return posts;\n}\n\nexport async function getSiteToc(contentPath: string, pathConfig?: PathConfig): Promise<ParsedMarkdown[]> {\n  const config = getConfig(pathConfig);\n  const filePatterns = config.getFilePatterns();\n\n  // Build UUID index\n  const uuidIndex = await buildUUIDIndexForContent(contentPath);\n\n  const files = await fg(filePatterns, {\n    cwd: contentPath,\n    absolute: true,\n  });\n\n  const iterablePostFiles = Object.entries(files);\n\n  let posts = await Promise.all(\n    iterablePostFiles.map(async (currentValue) => {\n      const parsed = await getFrontmatter(currentValue[1] as string).catch((err) => {\n        console.error(\"Error generating Toc:\", err);\n        process.exit(1);\n      });\n      \n      parsed.meta.slug = config.pathToSlug(currentValue[1]);\n\n      // Include UUID information if available\n      const uuidEntry = Object.values(uuidIndex).find(entry => entry.filePath === currentValue[1]);\n      parsed.meta.uuid = uuidEntry?.uuid || undefined; // Changed null to undefined for compatibility\n\n      return parsed;\n    })\n  );\n  \n  return posts;\n}\n\nexport async function getAllSites(path: string, pathConfig?: PathConfig): Promise<ParsedMarkdown[]> {\n  return await getPostsInPath(path, pathConfig);\n}\n\nexport async function getPageBySlug(contentroot: string, slug: string) {\n  const _path = contentroot + slug + \".md\";\n  const content = await fs.readFile(_path, \"utf-8\");\n  const post = await parseMarkdown(content, { baseDir: contentroot });\n  if (post) {\n        // Process BPMN placeholders to replace them with actual SVG content\n    //console.log('[DEBUG] About to process BPMN placeholders...');\n    const processedContent = await processBpmnPlaceholders(\n      post.code, // HTML content to process\n      contentroot // Base directory for resolving BPMN file paths\n    );\n    //console.log('[DEBUG] BPMN placeholders processing complete.');\n    \n    return {\n      content: processedContent,\n      meta: post.data,\n    };\n  }\n}\n\nexport async function resolveLinksInContent(contentDir: string, cachePath: string): Promise<void> {\n  await resolveUUIDLinks(contentDir, cachePath);\n}\n\nexport async function trackBacklinks(contentDir: string, outPath?: string): Promise<void> {\n  const backlinkIndex = await buildBacklinkIndex(contentDir);\n\n  if (outPath) {\n    const { writeBacklinkIndex } = await import(\"../link-resolver/backlinks\");\n    await writeBacklinkIndex(backlinkIndex, outPath);\n  }\n}\n","export function convertNotebookToHTML(nbPath: string): string {\n  // TODO: Use nbconvert output or parse .ipynb directly\n  return `<!-- HTML content from ${nbPath} -->`;\n}\n","export function generateOpenAPIEmbed(specUrl: string): string {\n  return `<iframe src='https://redocly.github.io/redoc/?url=${specUrl}' width='100%' height='1000px'></iframe>`;\n}\n","export function buildTOC(contentDir: string): object {\n  // TODO: Traverse folders and build sidebar tree\n  return {};\n}\n","export function generateSitemap(contentDir: string, outPath: string): void {\n  // TODO: Traverse content and generate sitemap.xml\n}\n","export function generateRSS(blogDir: string, outPath: string): void {\n  // TODO: Generate RSS XML from blog posts\n}\n","export * from \"./content/loadContent\";\nexport * from \"./parser/markdown\";\nexport * from \"./parser/frontmatter\";\nexport * from \"./parser/tsdoc\";\nexport * from \"./parser/pydoc\";\nexport * from \"./parser/notebook\";\nexport * from \"./parser/openapi\";\nexport * from \"./toc/buildTOC\";\nexport * from \"./link-resolver/resolveUUIDLinks\";\nexport * from \"./link-resolver/backlinks\";\nexport * from \"./link-resolver/uuidIndex\";\nexport * from \"./sitemap/generateSitemap\";\nexport * from \"./rss/generateRSS\";\nexport * from \"./config/config\";\nexport * from \"./types\";\n\nimport { parseMarkdown, isMarkdownFile } from \"./parser/markdown\";\nimport type { DocGenOptions, Preprocessor } from './types';\nimport { getConfig, configurePaths } from './config/config';\n\nconst defaults: DocGenOptions = {\n  remarkPlugins: [],\n  rehypePlugins: [],\n};\n\n/**\n * Configure doc-gen with path settings\n * Call this before using other doc-gen functions\n */\nexport function configureDocGen(options: DocGenOptions): void {\n  if (options.paths) {\n    configurePaths(options.paths);\n  }\n}\n\n/**\n * The svelte preprocessor for use with svelte.preprocess\n *\n */\nexport const doc_gen = (options: DocGenOptions = defaults): Preprocessor => {\n  // Configure paths if provided\n  if (options.paths) {\n    configurePaths(options.paths);\n  }\n\n  return {\n\t\tname: '@sdl/doc-gen',\n\t\tmarkup: async ({ content, filename }: { content: string; filename: string }) => {\n      ////console.log(\"doc-gen:markup: \", filename)\n      \n      // Only process markdown files (.md, .svx, .mdx)\n      if (!isMarkdownFile(filename)) {\n        // Return undefined to let other preprocessors handle this file\n        return undefined;\n      }\n      \n      try {\n        const parsed = await parseMarkdown(content);\n        return {\n          code: parsed.code as string,\n          data: parsed.data as Record<string, unknown>,\n          map: \"\",\n        };\n      } catch (error) {\n        console.error(`Doc-gen processing failed for ${filename}:`, error);\n        return {\n          code: content, // Return original content on error\n          data: {},\n          map: \"\",\n        };\n      }\n    }\n  }\n};\n\n","// @ts-ignore\nglobalThis.global = globalThis;\n\nif (typeof window !== \"undefined\") {\n  // @ts-ignore\n  window.global = globalThis;\n}\n\nexport * from \"./content/loadContent\";\nexport * from \"./index\";\n"],"names":["_optionalChain","remarkWikiRefsPatched","_nullishCoalesce","path","fs"],"mappings":"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"}